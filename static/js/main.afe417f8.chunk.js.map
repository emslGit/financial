{"version":3,"sources":["components/input/InputComponent.js","components/stats/StatsComponent.js","components/chart-wrapper/ChartWrapperComponent.js","components/add-extras/AddExtrasComponent.js","components/extra/ExtraComponent.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["InputComponent","forwardRef","ref","text","unit","options","className","type","maxLength","defaultValue","StatsComponent","stat","toLocaleString","replaceAll","ChartWrapperComponent","title","data","xLabel","yLabel","display","fontSize","scales","xAxes","scaleLabel","labelString","yAxes","legend","position","AddExtrasComponent","addExtra","currency","todayYear","Date","getFullYear","eventRef","useRef","firstRef","lastRef","firstImpactRef","lastImpactRef","annualRef","onClick","name","current","value","first","parseInt","last","focus","range","i","push","newExtra","id","Math","floor","random","period","parseFloat","annual","createExtra","ExtraComponent","extra","removeExtra","length","App","today","todayMonth","getMonth","useState","total","setTotal","stats","setStats","expenses","setExpenses","extras","setExtras","worst","best","mean","median","sigma","s1","s2","bottomStats","setBottomStats","setCurrency","selectCurrency","inputAge","inputRetireAt","inputCapital","inputDuration","inputSalary","inputSalaryInc","inputCosts","inputCostsInc","inputROI","inputDeviation","inputFees","inputInflation","inputIterations","inputPrecision","String","prototype","capitalize","this","charAt","toUpperCase","slice","swedishTax","monthly","sin","filter","x","analyse","iterations","monthsLeft","max","fees","inflation","roi","deviation","salaryInc","costsInc","workingYears","annualExtras","input","xtras","Array","fill","map","xtra","p","amount","index","calcAnnualExtras","precision","min","totalsCombinedData","finalWorth","avgWorth","statsData","sigmas","outcomes","k","salary","costs","totalsData","Object","years","worth","salaryWorth","round","len","netSalary","totalsBeforeFees","netTotal","normal","sort","a","b","d","arr","reduce","sum","w","sqrt","pow","calcMeanMedianSigma","deviations","no","forEach","diff","ceil","deviationNumber","keys","toPrecision","labels","datasets","label","backgroundColor","borderColor","borderWidth","pointRadius","onChange","s","toLowerCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afe417f8.chunk.js","sourcesContent":["import './InputComponent.css';\nimport {forwardRef} from \"react\";\n\n\nconst InputComponent = forwardRef(({text, unit, options}, ref) => {\n\n  return (\n    <span className=\"InputComponent\">\n      <p>{text}</p>\n      <input\n        ref={ref}\n        type={options?.type || 'number'}\n        maxLength={options?.maxLength || ''}\n        defaultValue={options?.defaultValue || ''}\n      />\n      <p>{unit}</p>\n    </span>\n  );\n})\n\nexport default InputComponent;","import './StatsComponent.css';\r\n\r\n\r\nconst StatsComponent = ({text, stat}) => {\r\n\r\n  return (\r\n    <span className=\"StatsComponent\">\r\n      <p><b>{text}</b></p>\r\n      <p>{stat[0].toLocaleString().replaceAll(',', ' ') + ' ' + stat[1]}</p>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default StatsComponent;","import {Bar, Line} from \"react-chartjs-2\";\r\nimport './ChartWrapperComponent.css';\r\n\r\n\r\nconst ChartWrapperComponent = ({type, title, data, xLabel, yLabel, legend}) => {\r\n  const options = {\r\n    title:{\r\n      display: true,\r\n        text: title,\r\n        fontSize: 20\r\n    },\r\n    scales: {\r\n      xAxes: [{\r\n        scaleLabel: {\r\n          display: xLabel,\r\n          labelString: xLabel\r\n        }\r\n      }],\r\n      yAxes: [{\r\n        scaleLabel: {\r\n          display: yLabel,\r\n          labelString: yLabel\r\n        }\r\n      }]\r\n    },\r\n    legend:{\r\n      display: legend,\r\n        position: 'bottom'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ChartWrapperComponent\">\r\n      {(type === 'bar') && <Bar data={data} options={options} />}\r\n      {(type === 'line') && <Line data={data} options={options} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartWrapperComponent;","import './AddExtrasComponent.css';\r\nimport {useRef} from \"react\";\r\n\r\n\r\nconst AddExtrasComponent = ({addExtra, currency}) => {\r\n  const todayYear = new Date().getFullYear()\r\n  const eventRef = useRef(null)\r\n  const firstRef = useRef(null)\r\n  const lastRef = useRef(null)\r\n  const firstImpactRef = useRef(null)\r\n  const lastImpactRef = useRef(null)\r\n  const annualRef = useRef(null)\r\n\r\n  const createExtra = () => {\r\n    const name = eventRef.current?.value\r\n    const first = parseInt(firstRef.current?.value)\r\n    const last = parseInt(lastRef.current?.value || first)\r\n\r\n    if (!name) {\r\n      eventRef.current.focus()\r\n    } else if (first < todayYear) {\r\n      firstRef.current.focus()\r\n    } else if (last < first) {\r\n      lastRef.current.focus()\r\n    } else {\r\n      const range = []\r\n      for (let i = first; i <= last; i++) {\r\n        range.push(i);\r\n      }\r\n\r\n      const newExtra = {\r\n        id: Math.floor(Math.random() * 10000),\r\n        name: eventRef.current?.value,\r\n        period: range,\r\n        first: parseFloat(firstImpactRef.current?.value) || 0,\r\n        last: parseFloat(lastImpactRef.current?.value) || 0,\r\n        annual: parseFloat(annualRef.current?.value) || 0\r\n      }\r\n\r\n      eventRef.current.value = ''\r\n      firstRef.current.value = ''\r\n      lastRef.current.value = ''\r\n      firstImpactRef.current.value = ''\r\n      lastImpactRef.current.value = ''\r\n      annualRef.current.value = ''\r\n\r\n      return newExtra\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"AddExtrasComponent flex-cols\">\r\n      <span>\r\n        <span>\r\n          <p>Name of event: </p>\r\n          <input ref={eventRef} type=\"text\"/>\r\n        </span>\r\n        <span>\r\n          <p>Starting anno: </p>\r\n          <input ref={firstRef} type=\"number\"/>\r\n        </span>\r\n        <span>\r\n          <p>Ending anno: </p>\r\n          <input ref={lastRef} type=\"number\"/>\r\n        </span>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <p>Initial impact: </p>\r\n          <span>\r\n            <input ref={firstImpactRef} type=\"number\"/>\r\n            <p>{currency}</p>\r\n          </span>\r\n        </span>\r\n        <span>\r\n          <p>Final impact: </p>\r\n          <span>\r\n            <input ref={lastImpactRef} type=\"number\"/>\r\n            <p>{currency}</p>\r\n          </span>\r\n        </span>\r\n        <span>\r\n          <p>Annual impact: </p>\r\n          <span>\r\n            <input ref={annualRef} type=\"number\"/>\r\n            <p>{currency}</p>\r\n          </span>\r\n        </span>\r\n      </span>\r\n      <button onClick={() => addExtra(createExtra())}>Add Event</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddExtrasComponent;","import './ExtraComponent.css';\r\n\r\n\r\nconst ExtraComponent = ({extra, currency, removeExtra}) => {\r\n\r\n  return (\r\n    <div className=\"ExtraComponent flex-between\">\r\n      <span className=\"flex-cols\">\r\n        <p><b>{extra.name + ':'}</b> {(extra.first > 0 ? ' Providing ' : 'Costing ') + extra.first.toLocaleString().replaceAll(',', ' ') + ' ' + currency} at year {extra.period[0]}</p>\r\n        <p>and {(extra.annual > 0 ? 'providing ' : 'costing ') + extra.annual.toLocaleString().replaceAll(',', ' ') + ' ' + currency} every year until {extra.period[extra.period.length - 1]}</p>\r\n        <p>where {extra.last.toLocaleString().replaceAll(',', ' ') + ' ' + currency} will be {(extra.last > 0 ? ' reimbursed.' : 'deducted.')}</p>\r\n      </span>\r\n      <span className=\"flex-center\">\r\n        <button className=\"x-button\" onClick={() => removeExtra(extra.id)}>\r\n          <div></div>\r\n          <div></div>\r\n        </button>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExtraComponent;","import {useState, useRef} from 'react'\nimport {normal} from 'randtools'\nimport './App.css';\nimport InputComponent from \"../input/InputComponent\";\nimport StatsComponent from \"../stats/StatsComponent\";\nimport ChartWrapperComponent from \"../chart-wrapper/ChartWrapperComponent\";\nimport AddExtrasComponent from \"../add-extras/AddExtrasComponent\";\nimport ExtraComponent from \"../extra/ExtraComponent\";\n\n\nconst App = () => {\n  const today = new Date()\n  const todayYear = today.getFullYear()\n  const todayMonth = today.getMonth()\n  const [total, setTotal] = useState({})\n  const [stats, setStats] = useState({})\n  const [expenses, setExpenses] = useState({})\n  const [extras, setExtras] = useState([])\n  const [bottomStats, setBottomStats] = useState({worst: '', best: '', mean: '', median: '', sigma: '', s1: '', s2: ''})\n  const [currency, setCurrency] = useState(\"SEK\")\n  const selectCurrency = useRef('SEK')\n  const inputAge = useRef(null)\n  const inputRetireAt = useRef(null)\n  const inputCapital = useRef(null)\n  const inputDuration = useRef(null)\n  const inputSalary = useRef(null)\n  const inputSalaryInc = useRef(null)\n  const inputCosts = useRef(null)\n  const inputCostsInc = useRef(null)\n  const inputROI = useRef(null)\n  const inputDeviation = useRef(null)\n  const inputFees = useRef(null)\n  const inputInflation = useRef(null)\n  const inputIterations = useRef(null)\n  const inputPrecision = useRef(null)\n\n  String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n  }\n\n  const swedishTax = (monthly) => {\n    if (monthly <= 10000) {\n      return 0.15\n    } else if (80000 <= monthly && monthly < 100000) {\n      return 0.4\n    } else if (100000 <= monthly) {\n      return 0.45\n    } else {\n      return (30.7 + 14.3 * Math.sin(0.0000256 * monthly - 1.3)) / 100\n    }\n  }\n\n  const calcMeanMedianSigma = (arr) => {\n    const mean = Math.round(arr.reduce((sum, w) => sum + w) / arr.length)\n    const median = arr[Math.floor(arr.length / 2)]\n    const sigma = Math.round(Math.sqrt(arr.reduce((sum, w) => sum + Math.pow(w - mean, 2), 0) / (arr.length - 1)))\n    return {mean: mean, median: median, sigma: sigma}\n  }\n\n  const calcAnnualExtras = (input) => {\n    let xtras = Array(parseInt(inputDuration.current.value)).fill(0)\n\n    input.map(xtra => {\n      xtra.period.map((p, i) => {\n        let amount = xtra.annual\n        const index = Math.max(p - todayYear, 0)\n\n        if (i === 0) {\n          amount += xtra.first\n        } else if (i === xtra.period.length - 1) {\n          amount += xtra.last\n        }\n        xtras[index] += amount\n      })\n    })\n    return xtras\n  }\n\n  const addExtra = (extra) => {\n    if (extra) {\n      setExtras([extra, ...extras])\n    }\n  }\n\n  const removeExtra = (id) => {\n    setExtras(extras.filter(x => x.id !== id))\n  }\n\n  const analyse = (iterations) => {\n    const monthsLeft = Math.max(11 - todayMonth, 0)\n    const current = parseFloat(inputCapital.current?.value) || 0\n    const fees = parseFloat(inputFees.current?.value) || 0\n    const inflation = parseFloat(inputInflation.current?.value) || 0\n    const roi = parseFloat(inputROI.current?.value) || 0\n    const deviation = parseFloat(inputDeviation.current?.value) || 0\n    const salaryInc = 1 + parseFloat(inputSalaryInc.current?.value) / 100 || 1\n    const costsInc = 1 + parseFloat(inputCostsInc.current?.value) / 100 || 1\n    const workingYears = Math.max(inputRetireAt.current?.value - inputAge.current?.value, 0)\n    const annualExtras = calcAnnualExtras(extras)\n    const precision = Math.min(1 / inputPrecision.current?.value, 1)\n    let totalsCombinedData = []\n    let finalWorth = []\n    let avgWorth = [current * iterations]\n    let statsData = {sigmas: [], outcomes: []}\n\n    // perform monte carlo iterations\n    let k = 1\n    do {\n      let salary = parseFloat(inputSalary.current?.value) || 0\n      let costs = parseFloat(inputCosts.current?.value) || 0\n\n      let totalsData = new Object({\n        years: [todayYear],\n        worth: [current - annualExtras[0]],\n        salaryWorth: [Math.round((salary * (1 - swedishTax(salary)) - costs) * monthsLeft)],\n        fees: [Math.round((salary - costs)) * 12 * (fees + inflation)/ 100],\n        expenses: [costs * 12 + (annualExtras[0] < 0 ? -annualExtras[0] : 0)]\n      })\n\n      let i = 0\n      while (++i < parseFloat(inputDuration.current?.value)) {\n        const len = totalsData.years.length\n        const netSalary = workingYears && workingYears < i ? -costs * 12 : (salary * (1 - swedishTax(salary)) - costs) * 12\n        const totalsBeforeFees = netSalary + totalsData.worth[len - 1] + annualExtras[i]\n        const netTotal = Math.round(totalsBeforeFees * (1 + (normal.mean(roi, deviation, 3) - (fees + inflation))/ 100))\n\n        totalsData.years.push(todayYear + i)\n        totalsData.salaryWorth.push(workingYears && workingYears < i ? totalsData.salaryWorth[len - 1] : Math.round(netSalary + totalsData.salaryWorth[len - 1]))\n        totalsData.worth.push(netTotal)\n        totalsData.fees.push(Math.round(totalsBeforeFees * (fees + inflation)/ 100))\n        totalsData.expenses.push(Math.round(costs * 12 + (annualExtras[i] < i ? -annualExtras[i] : i)))\n\n        avgWorth[i] = (avgWorth[i] || 0) + netTotal\n        salary = salary * salaryInc\n        costs = costs * costsInc\n      }\n\n      finalWorth.push(totalsData.worth[i - 1])\n      totalsCombinedData.push(totalsData)\n    } while (k++ < iterations)\n\n    finalWorth.sort((a, b) => a - b)\n    avgWorth = avgWorth.map(d => Math.round(d / totalsCombinedData.length))\n\n    // calculate distribution\n    const {mean, median, sigma} = calcMeanMedianSigma(finalWorth)\n    let deviations = {x: [], no: []}\n    finalWorth.forEach(w => {\n      const diff = mean - w\n      const x = diff > 0 ? Math.ceil(diff / (sigma * precision)) : Math.floor(diff / (sigma * precision))\n      const deviationNumber = diff > 0 ? Math.ceil(diff / sigma) : Math.floor(diff / sigma)\n      deviations.x[x] = (deviations.x[x] || 1) + 1\n      deviations.no[deviationNumber] = (deviations.no[deviationNumber] || 1) + 1\n    })\n\n      Object.keys(deviations.x).sort((a, b) => a - b).forEach(k => {\n      statsData.sigmas.push(k)\n      statsData.outcomes.push(deviations.x[k])\n    })\n\n    // update GUI\n    setBottomStats({\n      best: [finalWorth[finalWorth.length - 1], currency],\n      worst: [finalWorth[0], currency],\n      mean: [mean, currency],\n      median: [median, currency],\n      sigma: [sigma, currency],\n      s1: [(100 * ((deviations.no['-1'] || 0) + (deviations.no['1'] || 0)) / totalsCombinedData.length).toPrecision(4), '%'],\n      s2: [(100 * ((deviations.no['-1'] || 0) + (deviations.no['1'] || 0) + (deviations.no['-2'] || 0) + (deviations.no['2'] || 0)) / totalsCombinedData.length).toPrecision(4), '%']\n    })\n\n    setTotal({\n      labels: totalsCombinedData[0].years,\n      datasets: [\n        {\n          label: 'Total',\n          backgroundColor: 'darkslateblue',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: avgWorth\n        },\n        {\n          label: 'Invested',\n          backgroundColor: 'rgba(0,192,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].salaryWorth\n        },\n      ]\n    })\n\n    setExpenses({\n      labels: totalsCombinedData[0].years,\n      datasets: [\n        {\n          label: 'Fees & Inflation',\n          backgroundColor: 'rgba(255,100,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].fees\n        },\n        {\n          label: 'Expenses',\n          backgroundColor: 'rgba(192,0,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].expenses\n        }\n      ]\n    })\n\n    setStats({\n      labels: statsData.sigmas,\n      datasets: [\n        {\n          backgroundColor: 'darkslateblue',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: statsData.outcomes,\n          pointRadius: 0\n        },\n      ]\n    })\n  }\n\n  return (\n    <div className=\"App flex-center\">\n      <div className=\"wrapper flex-rows\">\n        <div className=\"finance-inputs\">\n          <header className=\"flex-between\">\n            <h1>Financial planner</h1>\n            <select ref={selectCurrency} onChange={() => setCurrency(selectCurrency.current.value)}>\n              <option value=\"SEK\">SEK</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"EUR\">EUR</option>\n            </select>\n          </header>\n          <br></br>\n          <InputComponent text=\"Your age:\" unit=\"Yrs\" ref={inputAge} options={{type: 'text', maxLength: 2, defaultValue: 25}}/>\n          <InputComponent text=\"Retirement age:\" unit=\"Yrs\" ref={inputRetireAt} options={{type: 'text', maxLength: 2, defaultValue: 40}}/>\n          <InputComponent text=\"Duration to analyze:\" unit=\"Yrs\" ref={inputDuration} options={{type: 'text', maxLength: 2, defaultValue: 20}}/>\n          <InputComponent text=\"Starting capital:\" unit={currency} ref={inputCapital} options={{defaultValue: 250000}}/>\n          <hr/>\n          <InputComponent text=\"Monthly gross salary:\" unit={currency} ref={inputSalary} options={{defaultValue: 32000}}/>\n          <InputComponent text=\"Annual salary increase:\" unit=\"%\" ref={inputSalaryInc} options={{type: 'percent', defaultValue: 5}}/>\n          <InputComponent text=\"Monthly costs:\" unit={currency} ref={inputCosts} options={{defaultValue: 12000}}/>\n          <InputComponent text=\"Annual costs increase:\" unit=\"%\" ref={inputCostsInc} options={{type: 'percent', defaultValue: 5}}/>\n          <hr/>\n          <InputComponent text=\"Annual ROI excl. fees:\" unit=\"%\" ref={inputROI} options={{type: 'percent', defaultValue: 10.5}}/>\n          <InputComponent text=\"Standard deviation:\" unit=\"%\" ref={inputDeviation} options={{type: 'percent', defaultValue: 16}}/>\n          <InputComponent text=\"Annual fees:\" unit=\"%\" ref={inputFees} options={{type: 'percent', defaultValue: 3}}/>\n          <InputComponent text=\"Inflation:\" unit=\"%\" ref={inputInflation} options={{type: 'percent', defaultValue: 2}}/>\n          <hr/>\n          <span className=\"flex-between\">\n            <InputComponent text=\"Iterations:\" ref={inputIterations} options={{type: 'text', maxLength: 6, defaultValue: 1000 }}/>\n            <InputComponent text=\"Precision:\" ref={inputPrecision} options={{type: 'text', maxLength: 3, defaultValue: 2 }}/>\n            <button onClick={() => analyse(inputIterations.current.value)}>Run Analysis</button>\n          </span>\n          <hr/>\n          <h3>Add custom events:</h3>\n          <AddExtrasComponent addExtra={addExtra} currency={currency}/>\n          <div className=\"extras\">\n            {(extras || []).map(extra => <ExtraComponent key={extra.id} extra={extra} currency={currency} removeExtra={removeExtra}/>)}\n          </div>\n        </div>\n        <div className=\"flex-cols\">\n          <ChartWrapperComponent type='bar' title='Total Assets' data={total} yLabel={currency} legend={true}/>\n          <ChartWrapperComponent type='bar' title='Annual Expenses' data={expenses} yLabel={currency} legend={true}/>\n          <ChartWrapperComponent type='bar' title='Distribution' data={stats}\n                                 xLabel={inputPrecision.current?.value ? `Sigma / ${inputPrecision.current?.value}` : 'Sigma'}\n                                 yLabel={'No. Outcomes'} legend={false}/>\n          {bottomStats.best &&\n          <div className=\"bottom-stats\">\n            <h3>Statistics summary:</h3>\n            <span className=\"flex-cols\">\n              {Object.keys(bottomStats).map((s, i) => <StatsComponent key={i} text={s.capitalize() + ':'} stat={bottomStats[s.toLowerCase()]}/>)}\n            </span>\n          </div>\n          }\n        </div>\n      </div>\n      <footer>\n        <hr/>\n        All Rights Reserved Emanuel Slätteby 2021\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}