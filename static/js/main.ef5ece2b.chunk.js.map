{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","today","Date","useState","total","setTotal","stats","setStats","worst","best","mean","sigma","oneDev","twoDev","bottomStats","setBottomStats","currency","setCurrency","selectCurrency","useRef","inputAge","inputRetireAt","inputCapital","inputDuration","inputSalary","inputSalaryInc","inputCosts","inputCostsInc","inputROI","inputDeviation","inputFees","inputInflation","inputIterations","className","ref","onChange","current","value","type","defaultValue","onClick","iterations","monthly","parseFloat","fees","inflation","roi","deviation","salaryInc","costsInc","todayYear","getFullYear","totalsCombinedData","statsData","sigmas","outcomes","workingYears","Math","max","parseInt","k","salary","costs","totalsData","Object","years","worth","salaryWorth","round","i","len","length","netSalary","sin","splice","normal","avgWorth","lastWorth","forEach","d","_d","sort","a","b","map","reduce","sum","w","sqrt","pow","deviations","diff","deviationNumber","ceil","floor","keys","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","analyse","toLocaleString","replaceAll","toLowerCase","options","title","display","text","fontSize","scales","yAxes","scaleLabel","labelString","legend","position","xAxes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef5ece2b.chunk.js","sourcesContent":["import {useState, useRef} from 'react'\nimport {Bar} from 'react-chartjs-2';\nimport {normal} from 'randtools'\nimport './App.css';\n\n\nconst App = () => {\n  const today = new Date()\n  const [total, setTotal] = useState({})\n  const [stats, setStats] = useState({})\n  const [bottomStats, setBottomStats] = useState({worst: '', best: '', mean: '', sigma: '', oneDev: '', twoDev: ''})\n  const [currency, setCurrency] = useState(\"SEK\")\n  const selectCurrency = useRef(null)\n  const inputAge = useRef(null)\n  const inputRetireAt = useRef(null)\n  const inputCapital = useRef(null)\n  const inputDuration = useRef(null)\n  const inputSalary = useRef(null)\n  const inputSalaryInc = useRef(null)\n  const inputCosts = useRef(null)\n  const inputCostsInc = useRef(null)\n  const inputROI = useRef(null)\n  const inputDeviation = useRef(null)\n  const inputFees = useRef(null)\n  const inputInflation = useRef(null)\n  const inputIterations = useRef(null)\n\n  const swedishTax = (monthly) => {\n    if (monthly <= 10000) {\n      return 0.15\n    } else if (80000 <= monthly && monthly < 100000) {\n      return 0.4\n    } else if (100000 < monthly) {\n      return 0.45\n    } else {\n      return (30.7 + 14.3 * Math.sin(0.0000256 * monthly - 1.3)) / 100\n    }\n  }\n\n  const analyse = (iterations) => {\n    const current = parseFloat(inputCapital.current.value) || 0\n    const fees = parseFloat(inputFees.current.value) || 0\n    const inflation = parseFloat(inputInflation.current.value) || 0\n    const roi = parseFloat(inputROI.current.value) || 0\n    const deviation = parseFloat(inputDeviation.current.value) || 0\n    const salaryInc = 1 + parseFloat(inputSalaryInc.current.value) / 100 || 1\n    const costsInc = 1 + parseFloat(inputCostsInc.current.value) / 100 || 1\n    const todayYear = today.getFullYear()\n    let totalsCombinedData = []\n    let statsData = {sigmas: [], outcomes: []}\n    const workingYears = Math.max(parseInt(inputRetireAt.current.value - inputAge.current.value), 0)\n\n    let k = 1\n    do {\n      let salary = parseFloat(inputSalary.current.value) || 0\n      let costs = parseFloat(inputCosts.current.value) || 0\n      let totalsData = new Object({\n        years: [todayYear],\n        worth: [current],\n        salaryWorth: [Math.round((salary - costs) * 12)],\n        fees: [Math.round((salary - costs)) * 12 * (fees + inflation)/ 100]\n      })\n\n      let i = 0\n      while (++i < parseFloat(inputDuration.current.value)) {\n        const len = totalsData.years.length\n        const netSalary = workingYears && workingYears < i ? -costs * 12 : (salary * (1 - swedishTax(salary)) - costs) * 12\n        totalsData.years.splice(len, 0, todayYear + i)\n        totalsData.salaryWorth.splice(len, 0, workingYears && workingYears < i ? totalsData.salaryWorth[len - 1] : Math.round(netSalary + totalsData.salaryWorth[len - 1]))\n        totalsData.worth.splice(len, 0, Math.round((netSalary + totalsData.worth[len - 1]) * (1 + (normal.mean(roi, deviation) - (fees + inflation))/ 100)))\n        totalsData.fees.splice(len, 0, Math.round((netSalary + totalsData.worth[len - 1]) * (fees + inflation)/ 100))\n        salary = salary * salaryInc\n        costs = costs * costsInc\n      }\n\n      totalsCombinedData.splice(totalsCombinedData.length, 0, totalsData)\n    } while (k++ < iterations)\n\n    let avgWorth = []\n    let lastWorth = []\n    totalsCombinedData.forEach(d => {\n      lastWorth.splice(lastWorth.length, 0, d.worth[d.worth.length - 1])\n      d.worth.forEach((_d, i) => avgWorth[i] = ((avgWorth[i] || 0) + _d))\n    })\n    lastWorth.sort((a, b) => a - b)\n    avgWorth = avgWorth.map(d => Math.round(d / totalsCombinedData.length))\n\n    const mean = Math.round(lastWorth.reduce((sum, w) => sum + w) / lastWorth.length)\n    const sigma = Math.round(Math.sqrt(lastWorth.reduce((sum, w) => sum + Math.pow(w - mean, 2), 0) / (lastWorth.length - 1)))\n\n    let deviations = {}\n    lastWorth.forEach(w => {\n      const diff = mean - w\n      const deviationNumber = diff > 0 ? Math.ceil(diff / sigma) : Math.floor(diff / sigma)\n      deviations[deviationNumber] = deviations[deviationNumber] ? deviations[deviationNumber] + 1 : 1\n    })\n\n    Object.keys(deviations).sort((a, b) => a - b).forEach(k => {\n      statsData.sigmas.splice(statsData.sigmas.length, 0, k)\n      statsData.outcomes.splice(statsData.outcomes.length, 0, deviations[k])\n    })\n\n    setBottomStats({\n      best: lastWorth[lastWorth.length - 1],\n      worst: lastWorth[0],\n      mean: mean,\n      sigma: sigma,\n      oneDev: 100 * ((deviations['-1'] || 0) + (deviations['1'] || 0)) / totalsCombinedData.length,\n      twoDev: 100 * ((deviations['-1'] || 0) + (deviations['1'] || 0) + (deviations['-2'] || 0) + (deviations['2'] || 0)) / totalsCombinedData.length\n    })\n\n    setTotal({\n      labels: totalsCombinedData[0].years,\n      datasets: [\n        {\n          label: 'Total',\n          backgroundColor: 'darkslateblue',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: avgWorth\n        },\n        {\n          label: 'Invested',\n          backgroundColor: 'rgba(0,192,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].salaryWorth\n        },\n        {\n          label: 'Fees & Inflation',\n          backgroundColor: 'rgba(192,0,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].fees\n        }\n      ]\n    })\n\n    setStats({\n      labels: statsData.sigmas,\n      datasets: [\n        {\n          label: 'Outcomes',\n          backgroundColor: 'darkslateblue',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: statsData.outcomes\n        },\n      ]\n    })\n  }\n\n  return (\n    <div className=\"App flex-center\">\n      <div className=\"wrapper flex-rows\">\n        <div className=\"finance-inputs\">\n          <span>\n            <h1>Financial planner</h1>\n            <select ref={selectCurrency} onChange={() => setCurrency(selectCurrency.current.value)}>\n              <option value=\"SEK\">SEK</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"EUR\">EUR</option>\n            </select>\n          </span>\n          <br></br>\n          <span>\n            <p>Your age:</p><input ref={inputAge} type=\"number\" defaultValue=\"25\"/><p>Yrs</p>\n          </span>\n          <span>\n            <p>Retirement age:</p><input ref={inputRetireAt} type=\"number\" defaultValue=\"45\"/><p>Yrs</p>\n          </span>\n          <span>\n            <p>Duration to analyze:</p><input ref={inputDuration} type=\"number\" defaultValue=\"25\"/><p>Yrs</p>\n          </span>\n          <span>\n            <p>Starting capital:</p><input ref={inputCapital} type=\"number\" defaultValue=\"250000\"/><p>{currency}</p>\n          </span>\n          <hr/>\n          <span>\n            <p>Monthly gross salary:</p><input ref={inputSalary} type=\"number\" defaultValue=\"32000\"/><p>{currency}</p>\n          </span>\n          <span>\n            <p>Annual salary increase:</p><input ref={inputSalaryInc} type=\"percent\" defaultValue=\"5\"/><p>%</p>\n          </span>\n          <span>\n            <p>Monthly costs:</p><input ref={inputCosts} type=\"number\" defaultValue=\"12000\"/><p>{currency}</p>\n          </span>\n          <span>\n            <p>Annual cost increase:</p><input ref={inputCostsInc } type=\"percent\" defaultValue=\"3\"/><p>%</p>\n          </span>\n          <hr/>\n          <span>\n            <p>Annual ROI excl. fees:</p><input ref={inputROI} type=\"percent\" defaultValue=\"11.5\"/><p>%</p>\n          </span>\n          <span>\n            <p>Standard deviation:</p><input ref={inputDeviation} type=\"percent\" defaultValue=\"15\"/><p>%</p>\n          </span>\n          <span>\n            <p>Annual fees:</p><input ref={inputFees} type=\"percent\" defaultValue=\"3\"/><p>%</p>\n          </span>\n          <span>\n            <p>Inflation:</p><input ref={inputInflation} type=\"percent\" defaultValue=\"2\"/><p>%</p>\n          </span>\n          <hr/>\n          <span>\n            <span className=\"flex-center\">\n              <p>Iterations:</p><input ref={inputIterations} type=\"number\" defaultValue=\"1000\"/>\n            </span>\n            <button onClick={() => analyse(inputIterations.current.value)}>Run Analysis</button>\n          </span>\n          <hr/>\n          {bottomStats.best &&\n          <div className=\"bottom-stats flex-cols\">\n            <span>\n              <p>Best:</p><p>{bottomStats.best.toLocaleString().replaceAll(\",\", \" \")} ({currency.toLowerCase()})</p>\n            </span>\n            <span>\n              <p>Worst:</p><p>{bottomStats.worst.toLocaleString().replaceAll(\",\", \" \")} ({currency.toLowerCase()})</p>\n            </span>\n            <span>\n              <p>Mean:</p><p>{bottomStats.mean.toLocaleString().replaceAll(\",\", \" \")} ({currency.toLowerCase()})</p>\n            </span>\n            <span>\n              <p>Sigma:</p><p>{bottomStats.sigma.toLocaleString().replaceAll(\",\", \" \")} ({currency.toLowerCase()})</p>\n            </span>\n            <span>\n              <p>s=1:</p><p>{bottomStats.oneDev}%</p>\n            </span>\n            <span>\n              <p>s=2:</p><p>{bottomStats.twoDev}%</p>\n            </span>\n          </div>}\n        </div>\n        <div className=\"flex-cols\">\n          <Bar\n            data={total}\n            options={{\n              title:{\n                display: true,\n                text: 'Expected returns',\n                fontSize: 20\n              },\n              scales: {\n                yAxes: [{\n                  scaleLabel: {\n                    display: true,\n                    labelString: currency\n                  }\n                }]\n              },\n              legend:{\n                display: true,\n                position: 'right'\n              }\n            }}\n          />\n          <Bar\n            data={stats}\n            options={{\n              title:{\n                display: true,\n                text: 'Normal distribution',\n                fontSize: 20\n              },\n              scales: {\n                xAxes: [{\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Standard deviations'\n                  }\n                }],\n                yAxes: [{\n                  scaleLabel: {\n                    display: true,\n                    labelString: currency\n                  }\n                }]\n              },\n              legend:{\n                display: true,\n                position: 'right'\n              }\n            }}\n          />\n        </div>\n      </div>\n      <footer>\n        All Rights Reserved Emanuel Slätteby 2021\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}