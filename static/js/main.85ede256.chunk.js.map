{"version":3,"sources":["components/InputComponent.js","components/StatsComponent.js","components/BarWrapperComponent.js","App.js","reportWebVitals.js","index.js"],"names":["InputComponent","forwardRef","ref","text","unit","options","className","type","maxLength","defaultValue","StatsComponent","stat","toLocaleString","title","data","yLabel","display","fontSize","scales","yAxes","scaleLabel","labelString","legend","position","App","today","Date","useState","total","setTotal","stats","setStats","worst","best","mean","sigma","s1","s2","bottomStats","setBottomStats","currency","setCurrency","selectCurrency","useRef","inputAge","inputRetireAt","inputCapital","inputDuration","inputSalary","inputSalaryInc","inputCosts","inputCostsInc","inputROI","inputDeviation","inputFees","inputInflation","inputIterations","String","prototype","capitalize","this","charAt","toUpperCase","slice","swedishTax","monthly","Math","sin","analyse","iterations","todayYear","getFullYear","current","parseFloat","value","fees","inflation","roi","deviation","salaryInc","costsInc","workingYears","max","totalsCombinedData","finalWorth","avgWorth","statsData","sigmas","outcomes","k","salary","costs","totalsData","Object","years","worth","salaryWorth","round","i","len","length","netSalary","netTotal","normal","splice","sort","a","b","map","d","arr","reduce","sum","w","sqrt","pow","calcMeanAndSigma","deviations","forEach","diff","deviationNumber","ceil","floor","keys","toPrecision","labels","datasets","label","backgroundColor","borderColor","borderWidth","onChange","onClick","s","toLowerCase","BarWrapperComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85ede256.chunk.js","sourcesContent":["import './InputComponent.css';\nimport {forwardRef} from \"react\";\n\n\nconst InputComponent = forwardRef(({text, unit, options}, ref) => {\n\n  return (\n    <span className=\"InputComponent\">\n      <p>{text}</p>\n      <input\n        ref={ref}\n        type={options?.type || 'number'}\n        maxLength={options?.maxLength || ''}\n        defaultValue={options?.defaultValue || ''}\n      />\n      <p>{unit}</p>\n    </span>\n  );\n})\n\nexport default InputComponent;","import './StatsComponent.css';\r\n\r\n\r\nconst StatsComponent = ({text, stat}) => {\r\n\r\n  return (\r\n    <span className=\"StatsComponent\">\r\n      <p>{text}</p>\r\n      <p>{stat[0].toLocaleString() + ' ' + stat[1]}</p>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default StatsComponent;","import './StatsComponent.css';\r\nimport {Bar} from \"react-chartjs-2\";\r\n\r\n\r\nconst StatsComponent = ({title, data, yLabel}) => {\r\n\r\n  return (\r\n    <Bar\r\n      data={data}\r\n      options={{\r\n        title:{\r\n          display: true,\r\n          text: title,\r\n          fontSize: 20\r\n        },\r\n        scales: {\r\n          yAxes: [{\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: yLabel\r\n            }\r\n          }]\r\n        },\r\n        legend:{\r\n          display: true,\r\n          position: 'right'\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default StatsComponent;","import {useState, useRef} from 'react'\nimport {normal} from 'randtools'\nimport InputComponent from \"./components/InputComponent\";\nimport './App.css';\nimport StatsComponent from \"./components/StatsComponent\";\nimport BarWrapperComponent from \"./components/BarWrapperComponent\";\n\n\nconst App = () => {\n  const today = new Date()\n  const [total, setTotal] = useState({})\n  const [stats, setStats] = useState({})\n  const [bottomStats, setBottomStats] = useState({worst: '', best: '', mean: '', sigma: '', s1: '', s2: ''})\n  const [currency, setCurrency] = useState(\"SEK\")\n  const selectCurrency = useRef('SEK')\n  const inputAge = useRef(null)\n  const inputRetireAt = useRef(null)\n  const inputCapital = useRef(null)\n  const inputDuration = useRef(null)\n  const inputSalary = useRef(null)\n  const inputSalaryInc = useRef(null)\n  const inputCosts = useRef(null)\n  const inputCostsInc = useRef(null)\n  const inputROI = useRef(null)\n  const inputDeviation = useRef(null)\n  const inputFees = useRef(null)\n  const inputInflation = useRef(null)\n  const inputIterations = useRef(null)\n\n  String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n  }\n\n  const swedishTax = (monthly) => {\n    if (monthly <= 10000) {\n      return 0.15\n    } else if (80000 <= monthly && monthly < 100000) {\n      return 0.4\n    } else if (100000 <= monthly) {\n      return 0.45\n    } else {\n      return (30.7 + 14.3 * Math.sin(0.0000256 * monthly - 1.3)) / 100\n    }\n  }\n\n  const calcMeanAndSigma = (arr) => {\n    const mean = Math.round(arr.reduce((sum, w) => sum + w) / arr.length)\n    const sigma = Math.round(Math.sqrt(arr.reduce((sum, w) => sum + Math.pow(w - mean, 2), 0) / (arr.length - 1)))\n    return {mean: mean, sigma: sigma}\n  }\n\n  const analyse = (iterations) => {\n    const todayYear = today.getFullYear()\n    const current = parseFloat(inputCapital.current.value) || 0\n    const fees = parseFloat(inputFees.current.value) || 0\n    const inflation = parseFloat(inputInflation.current.value) || 0\n    const roi = parseFloat(inputROI.current.value) || 0\n    const deviation = parseFloat(inputDeviation.current.value) || 0\n    const salaryInc = 1 + parseFloat(inputSalaryInc.current.value) / 100 || 1\n    const costsInc = 1 + parseFloat(inputCostsInc.current.value) / 100 || 1\n    const workingYears = Math.max(inputRetireAt.current.value - inputAge.current.value, 0)\n    let totalsCombinedData = []\n    let finalWorth = []\n    let avgWorth = [current * iterations]\n    let statsData = {sigmas: [], outcomes: []}\n\n    // perform monte carlo iterations\n    let k = 1\n    do {\n      let salary = parseFloat(inputSalary.current.value) || 0\n      let costs = parseFloat(inputCosts.current.value) || 0\n\n      let totalsData = new Object({\n        years: [todayYear],\n        worth: [current],\n        salaryWorth: [Math.round((salary * (1 - swedishTax(salary)) - costs) * 12)],\n        fees: [Math.round((salary - costs)) * 12 * (fees + inflation)/ 100]\n      })\n\n      let i = 0\n      while (++i < parseFloat(inputDuration.current.value)) {\n        const len = totalsData.years.length\n        const netSalary = workingYears && workingYears < i ? -costs * 12 : (salary * (1 - swedishTax(salary)) - costs) * 12\n        const netTotal = Math.round((netSalary + totalsData.worth[len - 1]) * (1 + (normal.mean(roi, deviation) - (fees + inflation))/ 100))\n\n        totalsData.years.splice(len, 0, todayYear + i)\n        totalsData.salaryWorth.splice(len, 0, workingYears && workingYears < i ? totalsData.salaryWorth[len - 1] : Math.round(netSalary + totalsData.salaryWorth[len - 1]))\n        totalsData.worth.splice(len, 0, netTotal)\n        totalsData.fees.splice(len, 0, Math.round((netSalary + totalsData.worth[len - 1]) * (fees + inflation)/ 100))\n\n        avgWorth[i] = (avgWorth[i] || 0) + netTotal\n        salary = salary * salaryInc\n        costs = costs * costsInc\n      }\n\n      finalWorth.splice(finalWorth.length, 0, totalsData.worth[i - 1])\n      totalsCombinedData.splice(totalsCombinedData.length, 0, totalsData)\n    } while (k++ < iterations)\n\n    finalWorth.sort((a, b) => a - b)\n    avgWorth = avgWorth.map(d => Math.round(d / totalsCombinedData.length))\n\n    // calculate normal distribution\n    const {mean, sigma} = calcMeanAndSigma(finalWorth)\n    let deviations = {}\n\n    finalWorth.forEach(w => {\n      const diff = mean - w\n      const deviationNumber = diff > 0 ? Math.ceil(diff / sigma) : Math.floor(diff / sigma)\n      deviations[deviationNumber] = deviations[deviationNumber] ? deviations[deviationNumber] + 1 : 1\n    })\n\n    Object.keys(deviations).sort((a, b) => a - b).forEach(k => {\n      statsData.sigmas.splice(statsData.sigmas.length, 0, k)\n      statsData.outcomes.splice(statsData.outcomes.length, 0, deviations[k])\n    })\n\n    // update GUI\n    setBottomStats({\n      best: [finalWorth[finalWorth.length - 1], currency],\n      worst: [finalWorth[0], currency],\n      mean: [mean, currency],\n      sigma: [sigma, currency],\n      s1: [(100 * ((deviations['-1'] || 0) + (deviations['1'] || 0)) / totalsCombinedData.length).toPrecision(4), '%'],\n      s2: [(100 * ((deviations['-1'] || 0) + (deviations['1'] || 0) + (deviations['-2'] || 0) + (deviations['2'] || 0)) / totalsCombinedData.length).toPrecision(4), '%']\n    })\n\n    setTotal({\n      labels: totalsCombinedData[0].years,\n      datasets: [\n        {\n          label: 'Total',\n          backgroundColor: 'darkslateblue',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: avgWorth\n        },\n        {\n          label: 'Invested',\n          backgroundColor: 'rgba(0,192,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].salaryWorth\n        },\n        {\n          label: 'Fees & Inflation',\n          backgroundColor: 'rgba(192,0,0,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: totalsCombinedData[0].fees\n        }\n      ]\n    })\n\n    setStats({\n      labels: statsData.sigmas,\n      datasets: [\n        {\n          label: 'Outcomes',\n          backgroundColor: 'darkslateblue',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: statsData.outcomes\n        },\n      ]\n    })\n  }\n\n  return (\n    <div className=\"App flex-center\">\n      <div className=\"wrapper flex-rows\">\n        <div className=\"finance-inputs\">\n          <header className=\"flex-between\">\n            <h1>Financial planner</h1>\n            <select ref={selectCurrency} onChange={() => setCurrency(selectCurrency.current.value)}>\n              <option value=\"SEK\">SEK</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"EUR\">EUR</option>\n            </select>\n          </header>\n          <br></br>\n          <InputComponent text=\"Your age:\" unit=\"Yrs\" ref={inputAge} options={{type: 'text', maxLength: 2, defaultValue: 25}}/>\n          <InputComponent text=\"Retirement age:\" unit=\"Yrs\" ref={inputRetireAt} options={{type: 'text', maxLength: 2, defaultValue: 45}}/>\n          <InputComponent text=\"Duration to analyze:\" unit=\"Yrs\" ref={inputDuration} options={{type: 'text', maxLength: 2, defaultValue: 25}}/>\n          <InputComponent text=\"Starting capital:\" unit={currency} ref={inputCapital} options={{defaultValue: 250000}}/>\n          <hr/>\n          <InputComponent text=\"Monthly gross salary:\" unit={currency} ref={inputSalary} options={{defaultValue: 32000}}/>\n          <InputComponent text=\"Annual salary increase:\" unit=\"%\" ref={inputSalaryInc} options={{type: 'percent', defaultValue: 5}}/>\n          <InputComponent text=\"Monthly costs:\" unit={currency} ref={inputCosts} options={{defaultValue: 12000}}/>\n          <InputComponent text=\"Annual costs increase:\" unit=\"%\" ref={inputCostsInc} options={{type: 'percent', defaultValue: 5}}/>\n          <hr/>\n          <InputComponent text=\"Annual ROI excl. fees:\" unit=\"%\" ref={inputROI} options={{type: 'percent', defaultValue: 10.5}}/>\n          <InputComponent text=\"Standard deviation:\" unit=\"%\" ref={inputDeviation} options={{type: 'percent', defaultValue: 16}}/>\n          <InputComponent text=\"Annual fees:\" unit=\"%\" ref={inputFees} options={{type: 'percent', defaultValue: 3}}/>\n          <InputComponent text=\"Inflation:\" unit=\"%\" ref={inputInflation} options={{type: 'percent', defaultValue: 2}}/>\n          <hr/>\n          <span className=\"flex-rows flex-between\">\n            <InputComponent text=\"Iterations:\" unit='' ref={inputIterations} options={{type: 'text', maxLength: 6, defaultValue: 1000}}/>\n            <button onClick={() => analyse(inputIterations.current.value)}>Run Analysis</button>\n          </span>\n          <hr/>\n          {bottomStats.best &&\n            <div className=\"flex-cols\">\n              {Object.keys(bottomStats).map(s => <StatsComponent text={s.capitalize() + ':'} stat={bottomStats[s.toLowerCase()]}/>)}\n            </div>\n          }\n        </div>\n        <div className=\"flex-cols\">\n          <BarWrapperComponent title='Expected returns' data={total} yLabel={currency}/>\n          <BarWrapperComponent title='Standard deviations' data={stats} yLabel={currency}/>\n        </div>\n      </div>\n      <footer>\n        <hr/>\n        All Rights Reserved Emanuel Slätteby 2021\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}